?points
pchShow <-#
  function(extras = c("*",".", "o","O","0","+","-","|","%","#"),#
           cex = 3, ## good for both .Device=="postscript" and "x11"#
           col = "red3", bg = "gold", coltext = "brown", cextext = 1.2,#
           main = paste("plot symbols :  points (...  pch = *, cex =",#
                        cex,")"))#
  {#
    nex <- length(extras)#
    np  <- 26 + nex#
    ipch <- 0:(np-1)#
    k <- floor(sqrt(np))#
    dd <- c(-1,1)/2#
    rx <- dd + range(ix <- ipch %/% k)#
    ry <- dd + range(iy <- 3 + (k-1)- ipch %% k)#
    pch <- as.list(ipch) # list with integers & strings#
    if(nex > 0) pch[26+ 1:nex] <- as.list(extras)#
    plot(rx, ry, type = "n", axes  =  FALSE, xlab = "", ylab = "", main = main)#
    abline(v = ix, h = iy, col = "lightgray", lty = "dotted")#
    for(i in 1:np) {#
      pc <- pch[[i]]#
      ## 'col' symbols with a 'bg'-colored interior (where available) :#
      points(ix[i], iy[i], pch = pc, col = col, bg = bg, cex = cex)#
      if(cextext > 0)#
          text(ix[i] - 0.3, iy[i], pc, col = coltext, cex = cextext)#
    }#
  }#
#
pchShow()
species <- iris$Species#
petalL <- iris$Petal.Length#
petalW <- iris$Petal.Width#
sepalL <- iris$Sepal.Length#
sepalW <- iris$Sepal.Width#
#
fit <- lm(petalW ~ petalL)#
fit#
b <- coef(fit)#
b#
#
petalWhat = b[2]*petalL +b[1]#
#
plot(petalL, petalW)#
abline(fit, col="blue")#
points(petalL, petalWhat, pch=14, col="blue")#
#
error <- petalW - petalWhat#
sqerror <- error*error#
cbind(petalW, petalWhat, error, sqerror)#
#
sse <- sum(sqerror)#
sse#
#
i <- 1#
segments(petalL[i], petalW[i], petalL[i], petalWhat[i], col="blue", lty=2)#
#
plot_error <- function(i) {#
  segments(petalL[i], petalW[i], petalL[i], petalWhat[i], col="blue", lty=2)#
}
pchShow <-#
  function(extras = c("*",".", "o","O","0","+","-","|","%","#"),#
           cex = 3, ## good for both .Device=="postscript" and "x11"#
           col = "red3", bg = "gold", coltext = "brown", cextext = 1.2,#
           main = paste("plot symbols :  points (...  pch = *, cex =",#
                        cex,")"))#
  {#
    nex <- length(extras)#
    np  <- 26 + nex#
    ipch <- 0:(np-1)#
    k <- floor(sqrt(np))#
    dd <- c(-1,1)/2#
    rx <- dd + range(ix <- ipch %/% k)#
    ry <- dd + range(iy <- 3 + (k-1)- ipch %% k)#
    pch <- as.list(ipch) # list with integers & strings#
    if(nex > 0) pch[26+ 1:nex] <- as.list(extras)#
    plot(rx, ry, type = "n", axes  =  FALSE, xlab = "", ylab = "", main = main)#
    abline(v = ix, h = iy, col = "lightgray", lty = "dotted")#
    for(i in 1:np) {#
      pc <- pch[[i]]#
      ## 'col' symbols with a 'bg'-colored interior (where available) :#
      points(ix[i], iy[i], pch = pc, col = col, bg = bg, cex = cex)#
      if(cextext > 0)#
          text(ix[i] - 0.3, iy[i], pc, col = coltext, cex = cextext)#
    }#
  }#
#
pchShow()
plot(petalL, petalW)#
abline(fit, col="blue")#
points(petalL, petalWhat, pch=4, col="blue")#
#
error <- petalW - petalWhat#
sqerror <- error*error#
cbind(petalW, petalWhat, error, sqerror)#
#
sse <- sum(sqerror)#
sse#
#
i <- 1#
segments(petalL[i], petalW[i], petalL[i], petalWhat[i], col="blue", lty=2)#
#
plot_error <- function(i) {#
  segments(petalL[i], petalW[i], petalL[i], petalWhat[i], col="blue", lty=2)#
}#
#
for (i in 1:150) plot_error(i)
pchshow()
pchShow()
plot(petalL, petalW)#
abline(fit, col="blue")#
points(petalL, petalWhat, pch=3, col="blue")#
#
error <- petalW - petalWhat#
sqerror <- error*error#
cbind(petalW, petalWhat, error, sqerror)#
#
sse <- sum(sqerror)#
sse#
#
i <- 1#
segments(petalL[i], petalW[i], petalL[i], petalWhat[i], col="blue", lty=2)#
#
plot_error <- function(i) {#
  segments(petalL[i], petalW[i], petalL[i], petalWhat[i], col="blue", lty=2)#
}#
#
for (i in 1:150) plot_error(i)
cd ..
system("mkdir test1")
matrix(1:20, ncol=4)
colnames(matrix)
colnames(matrix) <- c("a", "b", "c", "d")
mat <- matrix(1:20, ncol=4)
colnames(mat) <- c("a", "b", "c", "d")
mat
mat$a
mat[,a]
mat[,"a"]
rownames(mat) <- c("r1", "r1", "r3", "r4")
rownames(mat) <- c("r1", "r1", "r3", "r4", "r5")
mat
rownames(mat) <- paste("r", 1:5, sep="")
mat
"r"
1:5
data.frame(mat)
dat <- data.frame(mat)
mat <- matrix(1:20, ncol=4)
mat
1:20
colnames(mat) <- c("a", "b", "c", "d", "e")
colnames(mat) <- c("a", "b", "c", "d")
mat
colnames(mat)
rownames(mat)
rownames(mat) <- paste("r", 1:5)
mat
?paste
rownames(mat) <- paste("r", 1:5, sep="")
mat
"r"
1:5
paste("r", 1:5, sep="")
c("r", 1:5, sep="")
class(c("r", 1:5, sep=""))
mat[4,4]
mat[4,4]; mat[1,1]
mat[4,4]
mat[1,1]
paste(mat[4,4],mat[2,1])
c(mat[1,1],mat[4,4])
mat[c(mat[1,1], mat[4,4])]
mat[c(1, 4), c(1, 4)]
mat
mat[c(1, 3), ]
mat[, c(1, 3) ]
mat[c("r3", "r1"), c(1, 4)]
mat
mat <10
mat[ mat<10 ]
mat [ 2 ]
mat <- matrix(sample(1:20), ncol=4)
mat
rownames(mat) <- paste("r", 1:5, sep="")
colnames(mat) <- letters[1:4]
mat
mat[2]
mat[20]
?matrix
dat <- as.data.frame(mat)
mat[2]
dat[2]
dat[1,2]
mat[1,2]
dat$a
dat
dat
class(dat)
dat$a
class(dat$a)
ssum <- sum(1:5) # make sure each line of code works
ssum
1:5
n <- length(1:5) # as expected
n
avg <- ssum/n
avg
ssum <- sum(50:100) # when you notice that you do it again
n <- length(50:100) # itÊ»s time to make a function
avg <- ssum/n
avg
ssum <- sum(-1:-3) # etc.#
n <- length(-1:-3)#
avg <- ssum/n
avg
function(vec){ssum <- sum(vec) # etc.#
n <- length(vec)#
avg <- ssum/n }
myavg<- function(vec){ssum <- sum(vec) # etc.#
n <- length(vec)#
avg <- ssum/n }
myavg(1:5)
myavg<- function(vec){ssum <- sum(vec) # etc.#
n <- length(vec)#
avg <- ssum/n ; return(avg)}
myavg(1:5)
class(myavg(1:5))
mysq <- function( x ){  #
	x*x#
	}
mysq(2)
mysq <- function( x ){  #
	x*x#
	return(x*x)#
	}
mysq <- function( x ){  x*x 	return(x*x) }
mysq <- function( x ){  x*x;  	return(x*x) }
mysq <- function( x ){  x*x;  	return("cannoli") }
mysq(2)
mysq(1:5)
mysq <- function( x ){  x*x 	return(x*x) }
mysq <- function( x ){  x*x; 	return(x*x) }
mysq(1:3)
mysq(1:5)
mysq <- function( x ){  x*x; 	return(x*x[1]) }
mysq(1:5)
mysq <- function( x ){  xx <- x*x; 	return(xx[1]) }
mysq(1:5)
mysq <- function( x ){  x*x; 	return((x*x)[1]) }
mysq(1:5)
search()
?read.csv
?write.csv
mat
mat[c("a", "d"),]
mat[,c("a", "d")]
?text
plot(dat$a, dat$b)
text(16, 18, "my Tukey says=" )
text(16, 18, paste("my Tukey says=", dat[3,3])
)
plot(dat$a, dat$b)
text(16, 18, paste("my Tukey says=", dat[3,3]))
text(16, 18, paste("my Tukey says=", mean(dat)))
text(16, 18, paste("my Tukey says=", mean(dat$a)))
plot(dat$a, dat$b)
text(16, 18, paste("my Tukey says=", mean(dat$a)))
